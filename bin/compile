#!/usr/bin/env bash
DIR="$( cd "$(dirname "$0")" ; pwd -P )"
BUILD_DIR=${1:-"$DIR/.."}
CACHE_DIR=${2:-"$DIR/.."}
ENV_DIR=${3:-"$DIR/../env"}

source "$DIR/../helpers/functions.sh"

variables=(
    'ADAPT_AUTHORING_TOOL_VERSION'
    'ADMIN_DISPLAY_NAME'
    'ADMIN_EMAIL'
    'ADMIN_NAME'
    'ADMIN_PASSWORD'
    'MONGODB_NAME'
    'MONGODB_URI'
    'SESSION_SECRET'
)
declare -A defaults
defaults[ADAPT_AUTHORING_TOOL_VERSION]=0.6.1
defaults[ADMIN_DISPLAY_NAME]='admin'
defaults[ADMIN_EMAIL]=
defaults[ADMIN_NAME]='admin'
defaults[ADMIN_PASSWORD]='password'
defaults[MONGODB_NAME]=
defaults[MONGODB_URI]=
defaults[SESSION_SECRET]='sessionsecret'

# Heroku stores config env values in their respective file in the ENV_DIR. Loop through each of the
# known configuration values, check whether they have been set or set them to the default
echo "Reading environment variables" | indent_title
for variable in "${!defaults[@]}"; do
    if [ -f "$ENV_DIR/$variable" ]; then
        echo "$variable set" | indent_body
        export "$variable=$(cat $ENV_DIR/$variable)"
    else
        echo "$variable not set - using default" | indent_body
        export "$variable=${defaults[$variable]}"
    fi
done

# Download the adapt authoring tool source code
if [ -d "$BUILD_DIR/adapt_authoring" ]; then
    echo "Skipping adapt authoring tool download" | indent_title
else
    echo "Downloading adapt authoring tool" | indent_title
    cd $BUILD_DIR
    git clone --branch v${ADAPT_AUTHORING_TOOL_VERSION} https://github.com/adaptlearning/adapt_authoring.git adapt_authoring
    echo "Installing required modules" | indent_title
fi

# Install the required npm packages
cd "$BUILD_DIR/adapt_authoring"
npm install -g grunt-cli
npm install --production

# Copy the start script into the build folder
cp "$DIR/../lib/start-adapt-authoring-server.js" "$BUILD_DIR"

# Detect whether ffmpeg is available and use it if so
useffmpeg='n'
if [ -x "$(command -v ffmpeg)" ]; then
    useffmpeg='y'
fi

# Attempt to install (set up the DB and build the assets).
# serverPort is not provided as it is only known at runtime (see lib/start-adapt-authoring-server.js)
# yes is used to send blank responses to any other questions the installer asks
#
# NOTE: Runs a production frontent build if the DB is already populated (causes the install to fail)
# sadly the two are linked in the adapt installer (why?), this is not a perfect solution currently
# some parts will not function correctly without a complete reinstall
if [ -f "$CACHE_DIR/adapt_authoring_tool_installed" ]; then
    echo "Only installing frontend as DB already exists" | indent_title
    grunt build:prod
else
    echo "Beginning installation" | indent_title
    cd "$BUILD_DIR/adapt_authoring"
    yes "" | node install \
      --dataRoot "data" \
      --dbConnectionUri "${MONGODB_URI}" \
      --dbName "${MONGODB_NAME}" \
      --install y \
      --masterTenantName "${ADMIN_NAME}" \
      --masterTenantDisplayName "${ADMIN_DISPLAY_NAME}" \
      --serverName localhost \
      --sessionSecret "${SESSION_SECRET}" \
      --suEmail "${ADMIN_EMAIL}" \
      --suPassword "${ADMIN_PASSWORD}" \
      --suRetypePassword "${ADMIN_PASSWORD}" \
      --useConnectionUri y \
      --useffmpeg $useffmpeg || grunt build:prod
    # The installer uses _dirname to set the root in config, however building occurs in a temp folder
    # so replace any instances of the tmp folder with what will be its final position in config
    sed -i .bak -e 's!'"$( pwd -P )"'!/app/adapt_authoring!g' conf/config.json
    rm conf/config.json.bak
    touch "$CACHE_DIR/adapt_authoring_tool_installed"
fi
